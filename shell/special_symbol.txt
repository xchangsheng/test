${}	:获取变量的值
	假设：file=/dir1/dir2/dir3/my.file.txt
	${file#*/} 去掉左边第一条斜杠`/`以及斜杠左边所有字符
	${file##*/} 去掉最后一条`/`及其左边所有字符串

	${file#*.} 去掉左边第一个`.`以及点左边所有字符
	${file##*.} 去掉最后一个`/`及其左边所有字符串

	${file%/*} 去掉右边最后条斜杠`/`以及斜杠右边所有字符
	${file%%/*} 去掉第一条`/`及其右边所有字符串

	${file%.*} 去掉右边最后一个`.`以及点右边所有字符
	${file%%.*} 去掉第一个`.`及其右边所有字符串

	${file:0:5}  /dir1 	取file的前5个字符（0表示起始点，5表示字节数）
	${file:5:5}	 /dir2

	目录替换:
	${file/dir/path}	 将第一个dir替换为path  /path1/dir2/dir3/my.file.txt
	${file//dir/path}	 将所有的dir替换为path  /path1/path2/path3/my.file.txt

	parm=${$1:-1}  如果第二个参数$1不为空，那么parm的值为$1,如果为空，则param=1
	${str1:-str2}  如果str1不为空，则parm为str1,否则为str2


> and >> 的区别： echo "hello" > log.txt ;echo "hello" >> log.txt
	相同点：> >>右边的输出文件不存在时，它们都会自动创建一个，并将左边的内容写入到文件中。
	不同点：当文件存在时，>不会对输出文件重复添加相同的内容，而>>则会追加不管重不重复。


$0	表示当前文件的文件名
$n	表示输入脚本或函数的第n个参数如：$1,$2...$n
$*	列出输入脚本或函数的所有参数,没有双引号时，参数不是一个整体，当使用双引号引起时，所有参数被作为一个整体
$@	列出输入脚本或函数的所有参数,没有双引号时，参数不是一个整体，当使用双引号引起时，所有参数也不是一个整体
$#	输出传递给脚本或函数的参数个数
$?	上个命令的推出状态或函数的返回值
$$	当前Shell进程的ID,对于脚本而言，就是当前脚本所在的进程ID

cat命令：
	cat file :查看文件内容
	cat -n file :查看文件内容，同时显示行号
	cat -b file :同上
	cat -e file :将在每一行的末尾显示“$”字符，在需要将多行内容转换成一行时非常有用。
	cat file1 file2 > file3 :将多个文件内容写入到一个文件中
